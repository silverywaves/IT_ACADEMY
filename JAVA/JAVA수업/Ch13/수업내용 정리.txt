
UpCasting ? 클래스자료형변환(상위클래스가 하위클래스 연결 = 상속관계에 있는 하위클래스들을 연결하기위해 사용)
			자동형변환(메모리 접근에 문제가 없기때문-좁아짐)
			상위클래스형 참조변수 = 하위클래스형 객체
			확장된(추가된) 멤버변수 접근가능 ?	(x) -> DownCasting
			확장된(추가된) 멤버메서드 접근가능 ? (x) -> DownCasting
			재정의된 멤버메서드(오버라이딩)에 접근가능 ? (o)

DownCasting ? 클래스자료형변환(확장된 부분에 접근하기위해 사용, UpCasting 전제)
			  강제형변환(instanceof 선행)
	


추상메서드 ?	미완성형 함수(선언만 하고 정의되지 않은 상태 => 헤더 o, 바디(구현부) x)
			작성되어있지 않은 구현부는 자식클래스에서 오버라이딩하여 사용
			=> 상속받는 클래스에서 다형성을 실현하도록 하기 위함
			
추상클래스 ?	추상메서드를 하나 이상 포함한 클래스 -> UPCASTING 용으로 사용됨	
				/ 추상메서드가 있으면 반드시 선언, 추상메서드가 없어도 추상클래스로 선언 가능
			추상클래스는 동작이 정의되지 않은 미완성형이므로 객체 생성 불가
				-> 상속을 통해 자식클래스를 만들고 자식클래스에서 추상메소드를 오버라이딩해야 객체 생성 가능
				-> 추상클래스를 상속받고 추상메서드를 오버라이딩하지 않으면 해당 클래스도 추상클래스가 됨
			선언시 Class 와 메서드 앞에 abstract 키워드 기재
			구현할 메서드를 명료하게 알려주는 인터페이스 역할 (& 프로그램 규격화)

			
interface ? 일반 메서드 없이 전부 추상메서드(public abstract)로만 구성
			일반 멤버 필드는 없고 public static fianl 로 선언된 상수만 있음
				=> interface 의 기본은 pulbic!
			직접 객체를 생성 불가, implements 키워드를 이용해 다른 클래스로 구현할때 객체 생성 가능
			구현된 클래스에서는 반드시 추상 메서드 재정의 필요	
	* inter face
		상호간의(사이)=연결개념 + 얼굴 => 마주보는(맞닿아있는) 환경
	* API
		Application Programming Interface
			
인터페이스 용도 : 낮은 결합도 -> 모듈화 -> 유지보수
				=> 코드 자체는 늘어나지만, 프로젝트 규모가 커졌을 때 범위별로 분리되어 편리해짐
				

 * class 일때는 다중상속 불가, interface 일때는 다중상속 가능
  - interface 는 추상클래스보다 한단계 더 추상화된 클래스
 		-> abstract class 에는 추상메서드가 하나 이상 필요, 미리 구현된 메서드도 올 수 있음
 		-> interface 는 모든 메서드가 추상메서드
  - interface 는 메서드가 정의되지 않았기 때문에, 메서드의 접근제어자나 리턴타입, 메서드명, 매개변수가 모두 동일한 메서드를
  	상속받아도 문제가 발생하지 않음 <- 해당 메서드는 아직 구현되지 않아 자식클래스에서 새롭게 정의해야하기 때문
  - class 는 메서드의 접근제어자나 리턴타입, 메서드명, 매개변수가 모두 동일한 메서드를 상속받게된다면 어느 부모의 메서드를
  	상속받아야할지 파악 불가 <- 이미 구현된 메서드 상속 불가
  
  