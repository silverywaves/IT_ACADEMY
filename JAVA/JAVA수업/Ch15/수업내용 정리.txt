* 예외
	- 프로그램이 실행되는 동안에 발생하는 예기치 않은 에러(오류=> 참 값과의 거리)
	
* 컴파일 에러 / 런타임 에러
	- Compile time Error : 컴파일시 발생하는 에러(문법에서 문제)
	- Run time Error : 실행중 발생하는 에러	<- 치명적 오류
		- Error : 프로그램 코드에 의해 수습될 수 없는 심각한 오류
		- Exception : 프로그램 코드에 의해 수습될 수 있는 미약한 오류
		
		
* 예외처리(exception handling)
	- 예외 발생에 대비한 코드 작성(실행이 멈추는 것을 방지)
		- try { 예외가 발생할만한 코드 } catch(예외종류, 참조변수) { 예외 발생시 처리하는 동작 코드 }
		- finally { 예외 발생여부에 상관없이 공통으로 수행되는 코드 }	: for DB 연결 or 자원(resource) 관리(임시 파일 삭제 등의)
	- 모든 예외처리 한번에 하는 방법 
		- 모든 예외는 Exception 클래스를 상속받음 => catch 구문에서 예외종류 클래스를 Exception 으로 지정
			- 에러와 예외사항을 모두 나타내는 최상위 클래스 Throwable 도 가능하긴함
			- 단, catch 구문 여러번 사용시, 부모가 자식보다 위쪽에 놓일 순 없음(도달할 수 있는 범위 벗어남)
	
	
* Throw & Throws
	- Throw  : 개발자가 예외를 의도적으로 발생시킴(테스트용으로 주로 사용)
				throw new 예외클래스();
	- Throws : 함수를 호출한 위치에서 예외처리를 하도록 함
				접근한정자 return형 메서드이름(매개변수) throws 예외클래스명();
	
	