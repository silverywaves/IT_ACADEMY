** 자료형
값(data)의 종류에 따라 값이 저장될 공간의 크기와 저장형식을 정의
- 기본형 : 실제 값(data) 저장 -> 논리형(boolean), 문자형(char), 정수형(byte, short, int, long), 실수형(float, double)
			-> boolean 제외 기본형은 서로 연산, 변환 가능
- 참조형 : 어떤 값이 저장되어있는 주소(memory address) or null / 연산불가 -> 기본형 제외 나머지 타입

---------------------------------------------------------

** 참조변수 선언 및 초기화
클래스이름 변수이름;
Date today = new Date();	// Date 객체를 생성해서 그 주소를 today 에 저장

---------------------------------------------------------

** 기본형 크기
	1byte	2byte	4byte	8byte
논리형  boolean
문자형		char
정수형	byte      short       int	long
실수형			float     double

정수형의 경우 범위는 `-2^n-1 ~ 2^n-1- 1'(n은 bit 수. 8bit=1byte)
실수형에서 높은 정밀도가 필요한 경우 double 사용

---------------------------------------------------------

** 상수(constant) : 값을 저장할 수 있는 공간. 다른 값으로 변경 불가
		선언과 동시에 초기화
		대문자로 작성, 여러 단어로 이루어진 경우 '_' 로 구분
		리터럴에 의미있는 이름을 붙여서 코드의 이해와 수정을 쉽게 만듦
		final int MAX_SPEED = 10;	// 상수 MAX_SPEED 를 선언 & 초기화

---------------------------------------------------------

** 리터럴(literal) : 그 자체로 값을 의미하는 것.
		int year(변수) = 2014(리터럴);
		final int MAX_VALUE(상수) = 100(리터럴);

- 정수형 : 접미사 'l' or 'L' -> long 타입 리터럴 / 접미사x -> int타입 리터럴
	 접두사 '0x' or '0X' -> 16진수 / 접두사 '0' -> 8진수
	 중간에 구분자 '_' 사용 가능
- 실수형 : 접미사 'f' or 'F' -> float 타입 리터럴, 접미사 'd' or 'D' -> double 타입 리터럴(기본자료형이라 생략가능)
	 접미사 'e' or 'E' -> 소수점이나 10의 제곱

리터럴의 타입과 저장될 변수의 타입 일치 or 저장범위가 넓은 타입에 좁은 타입의 값을 저장
단, 값의 크기에 상관없이 double 타입 리터럴은 float 타입 변수에 저장 불가

---------------------------------------------------------

