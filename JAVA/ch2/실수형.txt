* 실수형

float   <   double
 4	    8

- float 양의 범위 : 1.4 * 10^-45 ~ 3.4 * 10^38
         음의 범위 : -3.4 * 10^38 ~ -1.4 * 10^-45
	=> -1.4 * 10^-45 ~ 1.4 * 10^-45 범위(0 제외) 값은 표현불가

---------------------------------------------------------

* 부동소수점수(floating-point) 형태로 저장
	+-M * 2^E

* float 표현 방식
+-----------------------------------+
 |       S(1)   E(8)     M(23)	       |
 | S : 부호 0:양수, 1:음수	       |
 | E : 지수 -127~128	       |
 | M : 가수 10진수로 7자리	       |
+-----------------------------------+
> 4byte(32bit) / 2진수 23자리
> 2의 제곱을 곱한 형태로 저장하기 때문에 큰 범위의 값 저장 가능

* double 표현 방식
+-----------------------------------+
 |       S(1)   E(11)     M(52)	       |
 | S : 부호 0:양수, 1:음수	       |
 | E : 지수 -1023~1024	       |
 | M : 가수 10진수로 15자리	       |
+-----------------------------------+
> 8byte(64bit) / 2진수 52자리

- 부호(Sign bit)
	0이면 양수, 1이면 음수
	정수형과 달리 '2의 보수법' 사용x -> 부호비트만 변경
- 지수(Exponent)
	부호있는 정수
	float 경우, '숫자아님(NaN)'&'양의 무한대'&'음의 무한대'와 같이 특별한 값의 표현을 위해 예약되어있어
		 실제 사용가능한 지수의 범위는 -126~127
- 가수(Mantissa)
	실제 값인 가수를 저장하는 부분

---------------------------------------------------------

* 실수형의 선택 기준
7자리 이상의 정밀도가 필요하면 double 타입(정밀도 15자리)
(double 타입의 변수를 사용하는 경우는 '값의 범위' 보다 '높은 정밀도' 가 필요할 때가 많음)
연산속도의 향상 or 메모리 절약이 필요하면 float 타입

---------------------------------------------------------

* 오버플로우
실수형에서는 오버플로우가 발생하면 변수의 값은 무한대(infinity)

* 언더플로우(underflow)
실수형으로 표현할 수 없는 아주 작은 값(양의 최소값보다 작은 값)이 되는 경우
변수 값은 0

---------------------------------------------------------
