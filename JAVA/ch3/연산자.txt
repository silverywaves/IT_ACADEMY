* 연산자(operator)
연산을 수행하는 기호(+, -, *, / 등)

* 피연산자(operand)
연산자의 작업 대상(변수, 상수, 리터럴, 수식)

=> 연산자는 피연산자로 연산을 수행하고 나면 항상 결과값을 반환

--------------------------------------------------

* 식(expression)
연산자와 피연산자를 조합하여 계산하고자하는 바를 표현한 것

* 식을 평가(evaluation)한다
식을 계산하여 결과를 얻는 것

--------------------------------------------------

* 연산자의 종류
- 산술 연산자 : 사칙연산(+,-,*,/)과 나머지 연산(%, >>, <<)
- 비교 연산자 : 크고 작음과 같고 다름을 비교(>, <, >=, <=, ==, !=)
- 논리 연산자 : '그리고(AND)'와 '또는(OR)'으로 조건 연결(&&, ||, !, &, |, ^, ~)
- 대입 연산자 : 우변의 값을 좌변에 저장(=)
- 기타 : 형변환 연산자((type)), 삼항 연산자(?:), instanceof연산자

- 단항 연산자 : 피연산자 개수가 하나
- 이항 연산자 : 피연산자 개수가 두개
- 삼항 연산자 : 피연산자 개수가 세개

--------------------------------------------------

* 연산자의 우선순위
- 쉬프트 연산자(<<)는 덧셈 연산자보다 우선순위 낮음
	'x << 2 + 1'  ->  'x << (2 + 1)'
- 비트 연산자(&)는 비교 연산자(==)보다 우선순위 낮음
	'data & 0xFF == 0'  ->  'data & (0xFF == 0)'
- 논리 연산자 중 AND(&, &&)가 OR(|, ||)보다 우선순위 높음
	'x < -1 || x > 3 && x < 5'  ->  'x < -1 || (x > 3 && x < 5)'

=> 산술 > 비교 > 논리 > 대입
=> 단항 > 이항 > 삼항

--------------------------------------------------

* 연산자의 결합 규칙(진행방향)
- 단항 연산자와 대입 연산자 : 오른쪽 -> 왼쪽
- 그 외 연산자 : 왼쪽 -> 오른쪽

--------------------------------------------------

** 산술 변환(usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 연산 가능
-> 연산 전에 더 큰 타입으로 형변환하여 일치시킴(자동형변환)
	: 피연산자의 값손실 최소화를 위함
-> 피연산자의 타입이 int 보다 작은 타입이면 int 로 변환
	: 정수형의 기본타입인 int가 가장 효율적으로 처리할 수 있는 타입 &
 	  char 나 short 는 표현범위가 좁아서 오버플로우 발생가능성有
